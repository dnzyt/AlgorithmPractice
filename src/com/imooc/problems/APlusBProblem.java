package com.imooc.problems;

/**
 * Created by ningzeda on 11/25/2015.
 *
 * 位运算实现整数加法本质就是用二进制进行运算。
     其主要用了两个基本表达式：
     x^y //执行加法，不考虑进位。
     (x&y)<<1 //进位操作
    令x=x^y ；y=(x&y)<<1 进行迭代，每迭代一次进位操作右面就多一位0，最多需要“加数二进制位长度”次迭代就没有进位了，此时x^y的值就是结果。

    我们来做个3位数的加法：
    101+011=1000 //正常加法
    位运算加法：
    （1） 101 ^ 011 = 110
     (101 & 011)<<1 = 010
     （2） 110 ^ 010 = 100
     (110 & 010)<<1 = 100
     （3） 100 ^ 100 = 000
     (100 & 100)<<1 = 1000
     此时进行相加操作就没有进位了，即000 ^ 1000=1000即是最后结果。
 */
public class APlusBProblem {
    public int aplusb(int a, int b) {
        while (b != 0) {
            int carry = (a & b) << 1;  //获得进位，必须加括号，注意运算符优先级
            a = a ^ b;  //执行加法操作，不考虑进位
            b = carry;
        }

        return a;
    }


}
